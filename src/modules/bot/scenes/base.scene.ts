import { Injectable } from '@nestjs/common';
import {
  Action,
  Ctx,
  Hears,
  InjectBot,
  Scene,
  SceneEnter,
} from 'nestjs-telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { BotService } from '../bot.service';
import { Context, Telegraf } from 'telegraf';

@Injectable()
@Scene('base')
export class BaseScene {
  constructor(
    private readonly botService: BotService,
    @InjectBot() private readonly bot: Telegraf<Context>,
  ) {}

  @SceneEnter()
  async enter(@Ctx() ctx: SceneContext & Context) {
    const client = {
      firstname: ctx.from.first_name,
      lastname: ctx.from.last_name,
      telegram_username: ctx.from.username,
      telegram_id: ctx.from?.id,
    };
    try {
      const student_system = await this.botService.getClient(
        client.telegram_id,
      );
      const { data: response } = await this.botService.updateClient(
        client,
        student_system.id,
      );
      const channels = {
        '@Akzhol_Bolatuly7': -4115948871,
        '@Nbm808': -4148173937,
        '@rezikhann': -4171230338,
        '@dan7yar': -4197036835,
        '@sherniaz16': -4167072562,
      };
      ctx.session['curator'] = response.data.curator;
      ctx.session['hm_channel'] = channels[response.data.curator];
      await ctx.reply(
        `*–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:* **${client.telegram_username}**\n` +
          `*–ù–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏:* **${response.data.score}**\n`,
        {
          parse_mode: 'Markdown',
        },
      );
      await ctx.reply('–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'homework' }],
            [{ text: '–ú–æ–π –∫—É—Ä–∞—Ç–æ—Ä', callback_data: 'my-curator' }],
            client.telegram_id.toString() == process.env.ADMIN
              ? [{ text: '–ù–æ–≤–æ—Å—Ç–∏', callback_data: 'news' }]
              : [],
          ],
        },
      });
    } catch (err) {
      await ctx.reply(
        '–ù–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å–æ —Å–∫—Ä–∏–Ω–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É https://t.me/DoubledBo. –°–ø–∞—Å–∏–±–æ!',
      );
      await this.botService.forwardToAdmin(
        'Base ' + JSON.stringify(client) + ' ' + err,
      );
    }
  }

  @Hears('/menu')
  async returnBase(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Hears('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
  async returnBase2(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Hears('/remove')
  async remove(@Ctx() ctx: SceneContext) {
    ctx.session = null;
  }

  @Action(/begin/)
  async begin(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('begin');
  }

  @Action(/news/)
  async news(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('news');
  }

  @Action(/submit-homework/)
  async enterSubmit(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('homework');
  }

  @Action(/homework/)
  async showHomework(@Ctx() ctx: SceneContext & Context) {
    const client = {
      firstname: ctx.from.first_name,
      lastname: ctx.from.last_name,
      telegram_username: ctx.from.username,
      telegram_id: ctx.from?.id,
    };
    try {
      await ctx.deleteMessage();
      await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\nüî¥ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—à–ª–æ.\nüü¢ –æ–∑–Ω–∞—á–∞–µ—Ç –º–æ–∂–Ω–æ –µ—â–µ —Å–¥–∞–≤–∞—Ç—å.\n–ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, —Ç–æ –≤–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.',
        {
          reply_markup: await this.botService.chooseHomework(),
        },
      );
    } catch (err) {
      await ctx.reply(
        '–ù–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å–æ —Å–∫—Ä–∏–Ω–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É https://t.me/DoubledBo. –°–ø–∞—Å–∏–±–æ!',
      );
      await this.botService.forwardToAdmin(
        'Homework ' + JSON.stringify(client) + ' ' + err,
      );
    }
  }

  @Action(/hm-/)
  async onChooseHomework(@Ctx() ctx: SceneContext & Context) {
    const client = {
      firstname: ctx.from.first_name,
      lastname: ctx.from.last_name,
      telegram_username: ctx.from.username,
      telegram_id: ctx.from?.id,
    };
    try {
      await ctx.deleteMessage();
      ctx.session['hm'] = ctx.update['callback_query']['data'];
      const hm = ctx.update['callback_query']['data'];
      const hm_id = hm.replace(/\D/g, '');
      const homework = await this.botService.getHomework(hm_id);
      const day = new Date();
      await ctx.reply(homework.description);
      if (homework.due_to < day) {
        await ctx.replyWithHTML(`*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ.*`, {
          parse_mode: 'Markdown',
        });
        await ctx.scene.enter('base');
      } else {
        await ctx.reply(
          '**–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞** *–ú–µ–Ω—é* **–∏ –≤—ã–±–µ—Ä–∏—Ç–µ** *–ú–µ–Ω—é –±–æ—Ç–∞* **–∏–ª–∏** *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*. *–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–¥–∞—á—É –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª—ã –∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã.*',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª—ã', callback_data: 'submit-homework' }],
              ],
            },
          },
        );
      }
    } catch (err) {
      await ctx.reply(
        '–ù–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å–æ —Å–∫—Ä–∏–Ω–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É https://t.me/DoubledBo. –°–ø–∞—Å–∏–±–æ!',
      );
      await this.botService.forwardToAdmin(
        'Homework ' + JSON.stringify(client) + ' ' + err,
      );
    }
  }

  @Action(/my-curator/)
  async myCurator(@Ctx() ctx: SceneContext & Context) {
    await ctx.reply(ctx.session['curator']);
  }
}
